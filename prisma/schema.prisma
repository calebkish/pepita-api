generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets = ["debian-openssl-3.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "foreignKeys"
  extensions = [pg_trgm, pgcrypto, uuidOssp(map: "uuid-ossp")]
}

model Account {
  id String @id @default(uuid())
  created DateTime @default(now())
  username String @unique
  passwordHash String
  role Role @default(USER)

  email String?
  isEmailVerified Boolean @default(false)

  expirationTimestamp DateTime?

  autoCreatedMealTemplates MealTemplate[] @relation("AutoCreatedMealTemplates")

  // @TODO Add calorie+macro goals as settings
  // lb or kg
  // starting date
  // current weight
  // gender
  // estimated body fat %
    // OR:
    // calculate body fat
    // measurements in cm/in
    // Enter your height
    // Enter your waist measurement
    // Enter your neck measurement
  // Enter goal weight manually
    // OR:
    // what is your current training experience?
    // what is your main goal? (Build Muscle, Lose Fat, Maintain)

  // ## Calculated ##
  // Suggested goal weight change per week
  // TDEE
  // Target surplus

  dailyTargetProtein Int?
  dailyTargetFat Int?
  dailyTargetCarbohydrates Int?
  dailyTargetCalories Int?

  foods   Food[]
  recipes Recipe[]
  meals   Meal[]
  days    Day[]
  plans   Plan[]
  mealTemplates MealTemplate[]

  stores Store[]
  storeLocations StoreLocation[]
  shoppingLists ShoppingList[]
}

enum Role {
  TRIAL
  USER
  ADMIN
}

// =============================================================================
model Store {
  id String @id @default(uuid())
  name String

  locations StoreLocation[]

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
}

model StoreLocation {
  id String @id @default(uuid())
  name String

  store Store @relation(fields: storeId, references: [id], onDelete: Cascade)
  storeId String

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String

  foodsOnStoreLocations FoodsOnStoreLocations[]
}

model ShoppingList {
  id String @id @default(uuid())
  name String
  // foodsOnMeals String[]
  // recipesOnMeals String[]

  startDay String
  endDay String

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String

  purchasedFoodsIds String[]

  foods FoodsOnShoppingList[]
}

model FoodsOnShoppingList {
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String

  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String

  puchased Boolean @default(false)

  @@id([foodId, shoppingListId])
}

model FoodsOnStoreLocations {
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String

  storeLocation StoreLocation @relation(fields: [storeLocationId], references: [id], onDelete: Cascade)
  storeLocationId String

  @@id([foodId, storeLocationId])
}
// =============================================================================

model MealTemplate {
  id String @id @default(uuid())
  name String
  order Int

  calories Int @default(0) // denormalized
  protein Int @default(0) // denormalized
  carbohydrates Int @default(0) // denormalized
  fat Int @default(0) // denormalized
  factor Int @default(0)

  meals Meal[]

  inAutoCreatedTemplatesOf Account @relation("AutoCreatedMealTemplates", fields: [inAutoCreatedTemplatesOfAccountId], references: [id])
  inAutoCreatedTemplatesOfAccountId String

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
}

model Plan {
  id String   @id @default(uuid())
  created DateTime @default(now())

  name String
  days String[] @default([])
  scale Decimal  @default(1)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
}

model Day {
  id  String    @id @default(uuid())
  day String? // optional so it is possible to create `Day`s for plans

  mealsOnDays MealsOnDays[]

  weight Int?
  waist Decimal?
  neck Decimal?

  calories Decimal @default(0)
  protein Decimal @default(0)
  carbohydrates Decimal @default(0)
  fat Decimal @default(0)

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
}

model MealsOnDays {
  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId String
  day    Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId  String

  scale Decimal @default(1)

  @@id([mealId, dayId])
}

model Meal {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  name    String
  saved   Boolean  @default(false)

  foodsOnMeals   FoodsOnMeals[]
  recipesOnMeals RecipesOnMeals[]
  mealsOnDays    MealsOnDays[]

  mealTemplate MealTemplate? @relation(fields: [mealTemplateId], references: [id], onDelete: SetNull)
  mealTemplateId String?

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
}

model RecipesOnMeals {
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String
  meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId   String

  scale Decimal @default(1)

  @@id([recipeId, mealId])
}

model FoodsOnMeals {
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String
  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId String

  scaleBase Int @default(1)
  scaleNumerator Int @default(1)
  scaleDenominator Int @default(1)
  scaleDecimal Decimal @default(1)
  shouldUseScaleDecimal Boolean @default(false)
  // === STEP OVERRIDES ===
  halves     Boolean @default(false)
  thirds     Boolean @default(false)
  fourths    Boolean @default(false)
  sixths     Boolean @default(false)
  eighths    Boolean @default(false)
  sixteenths Boolean @default(false)

  foodUnit   FoodUnit @relation(fields: [foodUnitId], references: [id], onDelete: Cascade)
  foodUnitId String

  @@id([foodId, mealId])
}

model Recipe {
  id String @id @default(uuid())
  created DateTime @default(now())
  name String
  @@index([name(ops: raw("gist_trgm_ops(siglen=256)"))], type: Gist)

  saved Boolean @default(false)
  scale Decimal @default(1)

  foodsOnRecipes FoodsOnRecipes[]
  recipesOnMeals RecipesOnMeals[]

  owningBatchRecipeId String? // on batch recipe instances
  batchRecipe Recipe? @relation("RecipeOnBatchRecipes", fields: [owningBatchRecipeId], references: [id], onDelete: SetNull)
  batchRecipes Recipe[] @relation("RecipeOnBatchRecipes")

  // We assume a batch recipe is cooked if gramWeight is set
  gramWeight Decimal?

  isBatchRecipe Boolean @default(false) // on batch recipes
  isBatchRecipeEaten Boolean? // on batch recipes

  directions String[]

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
}

model FoodsOnRecipes {
  id String @id @default(uuid())
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  note String?

  scaleBase Int @default(1)
  scaleNumerator Int @default(1)
  scaleDenominator Int @default(1)
  scaleDecimal Decimal @default(1)
  shouldUseScaleDecimal Boolean @default(false)
  // === STEP OVERRIDES ===
  halves     Boolean @default(false)
  thirds     Boolean @default(false)
  fourths    Boolean @default(false)
  sixths     Boolean @default(false)
  eighths    Boolean @default(false)
  sixteenths Boolean @default(false)

  foodUnit FoodUnit @relation(fields: [foodUnitId], references: [id], onDelete: Restrict)
  foodUnitId String
}

model FoodBrand {
  id String @id @default(uuid())
  name String

  foods Food[]
}

enum BaseFoodUnit {
  g
  ml
}

model Food {
  id         String   @id @default(uuid())
  created    DateTime @default(now())
  name       String

  indexedName String
  @@index([indexedName(ops: raw("gist_trgm_ops(siglen=256)"))], type: Gist)

  baseUnitAmount Decimal? // what nutrients of the food will be based on; optional
  baseUnit String?    // b/c you might not want to enter weight for custom food

  source String?
  sourceUniqueId String?
  sourceImportDate DateTime?

  foodBrand FoodBrand? @relation(fields: [foodBrandId], references: [id], onDelete: SetNull)
  foodBrandId String?

  foodCategory FoodCategory? @relation(fields: [foodCategoryId], references: [id], onDelete: Restrict)
  foodCategoryId String?

  foodUnits FoodUnit[]
  nutrientsOnFoods NutrientsOnFoods[]

  recipes FoodsOnRecipes[]
  meals FoodsOnMeals[]


  shoppingLists FoodsOnShoppingList[]
  locations FoodsOnStoreLocations[]

  // If null, assume this is a "global" food
    // can only be modified by someone with Admin role
    // users can create a copy of the food if they want to customize it
  account Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String?
}

// could be created from a `Unit`. Not every `FoodUnit` needs to have a `Unit`
// associated with it; allow users to set step on the fly.
model FoodUnit {
  id      String   @id @default(uuid())
  created DateTime @default(now())

  name         String
  abbreviation String?
  servingSizeAmount Decimal @default(1)

  halves     Boolean @default(false)
  thirds     Boolean @default(false)
  fourths    Boolean @default(false)
  sixths     Boolean @default(false)
  eighths    Boolean @default(false)
  sixteenths Boolean @default(false)

  // unitToGramRatio Decimal
  // gramWeight Decimal
  baseUnitAmountRatio Decimal // = X / Food.baseAmount
  foodUnitAmount Decimal

  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String

  foodsOnRecipes FoodsOnRecipes[]
  foodsOnMeals   FoodsOnMeals[]
  Unit           Unit?            @relation(fields: [unitId], references: [id])
  unitId         String?
}

model Unit {
  id           String  @id @default(uuid())
  name         String  @unique
  abbreviation String? @unique

  halves     Boolean @default(false)
  thirds     Boolean @default(false)
  fourths    Boolean @default(false)
  sixths     Boolean @default(false)
  eighths    Boolean @default(false)
  sixteenths Boolean @default(false)

  foodUnits        FoodUnit[]
  nutrientsOnFoods NutrientsOnFoods[]
}

model FoodCategory {
  id   String @id @default(uuid())
  name String @unique

  food Food[]
}

model NutrientsOnFoods {
  nutrient   Nutrient @relation(fields: [nutrientId], references: [id], onDelete: Restrict)
  nutrientId String
  food       Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId     String

  amount Decimal

  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Restrict)
  unitId String

  @@id([foodId, nutrientId])
}

model Nutrient {
  id   String @id @default(uuid())
  name String @unique

  fdcNutrientId Int

  nutrientsOnFoods NutrientsOnFoods[]
}
